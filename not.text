Synchronous:

1/ এক্সিকিউশন টাইপ:	লাইন বাই লাইন 

(Sequential) |



2/ ব্লকিং নাকি নন-ব্লকিং:	ব্লকিং 

(Blocking) |


3/ কোড পারফরমেন্স:	ধীরগতির, কারণ অপেক্ষা 

করতে হয় |

4/ উদাহরণ :

সাধারণ console.log() |








Asynchronous:

1/ এক্সিকিউশন টাইপ : ব্যাকগ্রাউন্ডে কাজ, 

পরে নোটিফাই করে |



2/  ব্লকিং নাকি নন-ব্লকিং : 	নন-ব্লকিং 

(Non-blocking) |

3/ কোড পারফরমেন্স : দ্রুত, কারণ অপেক্ষা না 

করেও এগিয়ে চলে |

4/ উদাহরণ:  setTimeout, fetch, API calls |











*****
setTimeout() হলো একটি JavaScript ফাংশন যা

 একটি নির্দিষ্ট সময় পর একটি ফাংশন বা কোড 
 
 চালানোর জন্য ব্যবহৃত হয়। এটি 
 
 অ্যাসিঙ্ক্রোনাস অপারেশন, অর্থাৎ কোডটি এর 
 
 পরবর্তী লাইন এক্সিকিউট হতে থাকে এবং 
 
 নির্দিষ্ট সময় পর setTimeout() ফাংশনটি কাজ 
 
 করে।










 *****
 1. Promise
Promise হলো একটি অবজেক্ট যা একটি অ্যাসিঙ্ক্রোনাস অপারেশনের শেষ হওয়া (বা ব্যর্থ হওয়া) এবং তার ফলাফল প্রতিনিধিত্ব করে। এটা মূলত অ্যাসিঙ্ক্রোনাস অপারেশন যেমন, API থেকে ডেটা নেয়া বা ফাইল পড়ার জন্য ব্যবহার করা হয়।

Promise এর ৩টি স্টেট:

Pending: প্রাথমিক অবস্থা, যেখানে অপারেশনটি চলছে এবং ফলাফল পাওয়া যায়নি।
Fulfilled: অপারেশন সফলভাবে সম্পন্ন হয়েছে।
Rejected: অপারেশনটি ব্যর্থ হয়েছে।







*******

2. Promise.all
Promise.all() একসাথে একাধিক promise সমন্বিত করে এবং একটাই promise রিটার্ন করে, যা তখনই resolve হয় যখন সব promise fulfil হয়। যদি কোনো একটি promise reject হয়, তবে Promise.all() সেসময় রিজেক্ট হয়ে যাবে এবং প্রথম rejected promise এর সাথে সম্পর্কিত error দেখাবে।

Promise.all এর ব্যবহার: যখন আপনি একাধিক অ্যাসিঙ্ক্রোনাস অপারেশন একসাথে চালাতে চান এবং তাদের সবগুলো সম্পন্ন হওয়ার পর রেজাল্ট পেতে চান।